name=名称
weight=重さ

messages.valid.empty={target}:入力してください。
messages.valid.number={target}:数字で入力してください。

messages.valid.duplicate="{0}が重複しています。"

javax.validation.constraints.AssertFalse.message     = must be false
javax.validation.constraints.AssertTrue.message      = must be true
javax.validation.constraints.DecimalMax.message      = {value}${inclusive == true ? '以下' : '未満'}にしてください。
javax.validation.constraints.DecimalMin.message      = {value}${inclusive == true ? '以上' : 'より大きい値'}にしてください。
javax.validation.constraints.Digits.message          = 整数部分{integer}桁以内.小数部分{fraction}桁以内の形式にしてください。
javax.validation.constraints.Email.message           = メールアドレス形式にしてください。
javax.validation.constraints.Future.message          = 未来の日時を指定してください。
javax.validation.constraints.FutureOrPresent.message = 指定の日時もしくは未来の日時を指定してください。
javax.validation.constraints.Max.message             = {value}以下の値にしてください。
javax.validation.constraints.Min.message             = {value}以上の値にしてください。
javax.validation.constraints.Negative.message        = 0より小さい値にしてください。
javax.validation.constraints.NegativeOrZero.message  = 0以下にしてください。
javax.validation.constraints.NotBlank.message        = ブランクにしてください。
javax.validation.constraints.NotEmpty.message        = 入力してください。
javax.validation.constraints.NotNull.message         = must not be null
javax.validation.constraints.Null.message            = must be null
javax.validation.constraints.Past.message            = 過去の日時を指定してくだい。
javax.validation.constraints.PastOrPresent.message   = 指定の日時もしくは過去の日時を指定してください。
javax.validation.constraints.Pattern.message         = must match "{regexp}"
javax.validation.constraints.Positive.message        = 0より大きい値にしてください。
javax.validation.constraints.PositiveOrZero.message  = 0以上にしてください。
javax.validation.constraints.Size.message            = サイズは{min}から{max}の間にしてください。

org.hibernate.validator.constraints.CreditCardNumber.message        = クレジットカード番号が無効です。
org.hibernate.validator.constraints.Currency.message                = 無効な通貨（{value}の1つである必要があります）
org.hibernate.validator.constraints.EAN.message                     = 無効な{type}バーコード
org.hibernate.validator.constraints.Email.message                   = メールアドレス形式にしてください。
org.hibernate.validator.constraints.ISBN.message                    = 無効なISBNです。
org.hibernate.validator.constraints.Length.message                  = 長さは{min}から{max}までにしてください。
org.hibernate.validator.constraints.CodePointLength.message         = 長さは{min}から{max}までにしてください。
org.hibernate.validator.constraints.LuhnCheck.message               = The check digit for ${validatedValue} is invalid, Luhn Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod10Check.message              = The check digit for ${validatedValue} is invalid, Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod11Check.message              = The check digit for ${validatedValue} is invalid, Modulo 11 checksum failed
org.hibernate.validator.constraints.ModCheck.message                = The check digit for ${validatedValue} is invalid, ${modType} checksum failed
org.hibernate.validator.constraints.NotBlank.message                = 入力してください。
org.hibernate.validator.constraints.NotEmpty.message                = 入力してください。
org.hibernate.validator.constraints.ParametersScriptAssert.message  = script expression "{script}" didn't evaluate to true
org.hibernate.validator.constraints.Range.message                   = {min}から{max}までにしてください。
org.hibernate.validator.constraints.SafeHtml.message                = may have unsafe html content
org.hibernate.validator.constraints.ScriptAssert.message            = script expression "{script}" didn't evaluate to true
org.hibernate.validator.constraints.UniqueElements.message          = must only contain unique elements
org.hibernate.validator.constraints.URL.message                     = 正しいURLを入力してください。

org.hibernate.validator.constraints.br.CNPJ.message                 = invalid Brazilian corporate taxpayer registry number (CNPJ)
org.hibernate.validator.constraints.br.CPF.message                  = invalid Brazilian individual taxpayer registry number (CPF)
org.hibernate.validator.constraints.br.TituloEleitoral.message      = invalid Brazilian Voter ID card number

org.hibernate.validator.constraints.pl.REGON.message                = Invalid Polish Taxpayer Identification Number (REGON)
org.hibernate.validator.constraints.pl.NIP.message                  = Invalid VAT Identification Number (NIP)
org.hibernate.validator.constraints.pl.PESEL.message                = Invalid Polish National Identification Number (PESEL)

org.hibernate.validator.constraints.time.DurationMax.message        = must be shorter than${inclusive == true ? ' or equal to' : ''}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}
org.hibernate.validator.constraints.time.DurationMin.message = must be longer than${inclusive == true ? ' or equal to' : ''}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}